#! /usr/bin/env python
# -*- coding: utf-8 -*-

import telebot
from config import TOKEN
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup  # import buttons
import os
import json
import tg_analytic
#from telegram import ParseMode
#telebot.apihelper.proxy={'https':'socks5://Selroman358:L1e3OdN@185.230.88.187:45786'}

bot = telebot.TeleBot(TOKEN)
#os.chdir('nn_bot')

js = open("dict_final.json").read()
dict_recipes = json.loads(js)
reklama = '–ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã. –•–æ—á–µ—à—å –ø–∏—Ü—Ü—É? –ó–≤–æ–Ω–∏ +3898989894894'


@bot.message_handler(commands=['start'])  # it is welcome part
def welcome(message):
    tg_analytic.statistics(message.chat.id, message.text)
    global ingredients_user
    ingredients_user = ''
    start_text = ('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥, ' +
                  '–∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É /search ' +
                  '–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, –ª–µ–∂–∞—â–∏–µ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µü§ó')
    bot.send_message(message.chat.id, start_text)
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='search')
    markup.add(item1)
    bot.send_message(message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! =)', reply_markup=markup)

# category of food
@bot.message_handler(commands=['search'])
def search(message):
    tg_analytic.statistics(message.chat.id, message.text)
    # bot.send_message(message.chat.id, 'help')
    markup = types.InlineKeyboardMarkup(row_width=3)
    item1 = types.InlineKeyboardButton("–ö—Ä—É–ø—ã", callback_data='cereals')
    item2 = types.InlineKeyboardButton("–û–≤–æ—â–∏", callback_data='vegs')
    item20 = types.InlineKeyboardButton("–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data='milks')
    item3 = types.InlineKeyboardButton("–§—Ä—É–∫—Ç—ã", callback_data='fruits')
    item4 = types.InlineKeyboardButton("–†—ã–±–∞", callback_data='fish')
    item5 = types.InlineKeyboardButton("–ú—è—Å–æ", callback_data='meat')
    item6 = types.InlineKeyboardButton("–°–ø–µ—Ü–∏–∏", callback_data='spice')
    item61 = types.InlineKeyboardButton("–ë–∞–∫–∞–ª–µ—è", callback_data='grocery')
    item62 = types.InlineKeyboardButton("–ü—Ç–∏—Ü–∞", callback_data='birds')
    item620 = types.InlineKeyboardButton("–°—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã", callback_data='dfruits')
    item63 = types.InlineKeyboardButton("–Ø–≥–æ–¥—ã", callback_data='berry')
    item64 = types.InlineKeyboardButton("–°–ª–∞–¥–æ—Å—Ç–∏", callback_data='candy')
    item65 = types.InlineKeyboardButton("–ó–µ–ª–µ–Ω—å", callback_data='green')
    item66 = types.InlineKeyboardButton("–ú–∞–∫–∞—Ä–æ–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", callback_data='pasta')
    item73 = types.InlineKeyboardButton("–û—Ä–µ—Ö–∏", callback_data='nuts')
    item74 = types.InlineKeyboardButton("–•–ª–µ–±", callback_data='bread')
    item75 = types.InlineKeyboardButton("–Ø–π—Ü–∞", callback_data='eggs')
    item76 = types.InlineKeyboardButton("–ì—Ä–∏–±—ã", callback_data='lsd')
    item7 = types.InlineKeyboardButton("ü§ó –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ü§ó", callback_data='give_recipes1')
    markup.add(item1, item2, item20, item3, item4, item5, item6, item61, item62, item620, item63, item64, item65, item66, item73, item74, item75, item76)
    markup.add(item7)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)

@bot.message_handler(commands=['give_recipes1'])
def give_recipes1(message):
    tg_analytic.statistics(message.chat.id, message.text)
    global ingredients_user
    dict_links = []
    for rec in dict_recipes:
        l_ing = dict_recipes[rec][1]
        count_ = 0
        for i in l_ing:
            if i not in ingredients_user:
                count_ += 1
        if count_ == 0:
            dict_links.append(rec)
    if len(dict_links) > 0:
        string_ = ''
        for j in dict_links:
            string_ += j
            string_ += '\n'
    else:
        string_ = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ =('
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data='search'))
    bot.send_message(message.chat.id, string_ + '\n\n' + reklama, reply_markup=markup)
    ingredients_user = ''

@bot.message_handler(commands=['done_add'])
def done_add(message, text):
    tg_analytic.statistics(message.chat.id, message.text)
    bot.send_message(message.chat.id, text+ ' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')

@bot.message_handler(commands=['cereals'])
def cereals(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—Ä–∏—Å', '–ø–µ—Ä–ª–æ–≤–∫–∞', '–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', '–≥—Ä–µ—á–∫–∞', '–æ–≤—Å—è–Ω—ã–µ –æ—Ç—Ä—É–±–∏', '–∫—Ä—É–ø–∞ –∫—É–∫—É—Ä—É–∑–Ω–∞—è', '–∫—Ä—É–ø–∞ –∫—É–∫—É—Ä—É–∑–∞', '–ø—à–µ–Ω–æ', '–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞', '—Ö–ª–æ–ø—å—è', '–∫–∏–Ω–æ–∞', '–±—É–ª–≥—É—Ä', '–∫—Ä—É–ø–∞ —è—á–Ω–µ–≤–∞—è', '–∫—Ä—É–ø–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è', '–∫–∞—à–∞', '–∫—Ä—É–ø–∞', '–Ω—É—Ç', '–∫—Ä—É–ø–∞ –º–∞–Ω–∫–∞']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä—É–ø—ã:', reply_markup=markup)

@bot.message_handler(commands=['milks'])
def milks(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—Å–º–µ—Ç–∞–Ω–∞', '—Ç–≤–æ—Ä–æ–≥', '–º–∞–π–æ–Ω–µ–∑', '–π–æ–≥—É—Ä—Ç', '–ø–∞—Ä–º–µ–∑–∞–Ω', '—Å–ª–∏–≤–∫–∏', '–º–∞—Å–ª–æ', '–∫–µ—Ñ–∏—Ä', '—Ä—è–∂–µ–Ω–∫–∞', '–º–æ—Ü–∞—Ä–µ–ª–ª–∞', '–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=markup)

@bot.message_handler(commands=['vegs'])
def vegs(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–∫–∞–±–∞—á–æ–∫', '–ø–æ–º–∏–¥–æ—Ä', '–ø–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π', '—á–µ—Å–Ω–æ–∫', '–∏–º–±–∏—Ä—å', '–≥–æ—Ä–æ—Ö', '—Å–≤–µ–∫–ª–∞', '—Ç—ã–∫–≤–∞', '–∫–∞—Ä—Ç–æ—à–∫–∞', '–º–æ—Ä–∫–æ–≤—å', '–æ–ª–∏–≤–∫–∏', '–æ–≤–æ—â–∏', '–∫–∞–ø—É—Å—Ç–∞', '–ª—É–∫', '—Å–µ–ª—å–¥–µ—Ä–µ–π', '–±—Ä–æ–∫–∫–æ–ª–∏', '–æ–≥—É—Ä–µ—Ü', '—Ü—É–∫–∫–∏–Ω–∏', '–Ω—É—Ç', '–ø–µ—Ä–µ—Ü –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â–∏:', reply_markup=markup)

@bot.message_handler(commands=['fruits'])
def fruits(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–±–∞–Ω–∞–Ω', '–∫–∏–≤–∏', '–≥—Ä—É—à–∏', '–∞–ø–µ–ª—å—Å–∏–Ω', '–º–∞–Ω–≥–æ', '–ª–∏–º–æ–Ω', '—è–±–ª–æ–∫–æ', '–≥—Ä–∞–Ω–∞—Ç', '–¥—ã–Ω—è']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç—ã:', reply_markup=markup)

@bot.message_handler(commands=['fish'])
def fish(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—Ö–µ–∫', '—Ç—É–Ω–µ—Ü', '—Ç—Ä–µ—Å–∫–∞', '—Ä—ã–±–∞ –æ–∫—É–Ω—å', '—Ñ–∏–ª–µ —Ä—ã–±—ã', '—Ä—ã–±–∞ –ª–æ—Å–æ—Å—å']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:', reply_markup=markup)

@bot.message_handler(commands=['meat'])
def meat(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—Ñ–∞—Ä—à', '–ø–µ—á–µ–Ω—å', '–∫—Ä–æ–ª–∏–∫', '–º—è—Å–æ –∫—Ä–æ–ª–∏–∫–∞', '—Ñ–∏–ª–µ –∫—Ä–æ–ª–∏–∫–∞', '–º—è—Å–æ –≥–æ–≤—è–¥–∏–Ω—ã', '—Ç–µ–ª—è—Ç–∏–Ω–∞', '–∫–æ–ª–±–∞—Å–∞', '–º—è—Å–æ', '–≤–µ—Ç—á–∏–Ω–∞', '—Å–æ—Å–∏—Å–∫–∏', '–º—è—Å–æ –≥–æ–≤—è–¥–∏–Ω—ã', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏', '—Ä–µ–±—Ä–∞ —Å–≤–∏–Ω—ã–µ']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º—è—Å–æ:', reply_markup=markup)

@bot.message_handler(commands=['spice'])
def spice(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–≤–∞–Ω–∏–ª–∏–Ω', '–ø–µ—Ä–µ—Ü —á—ë—Ä–Ω—ã–π', '–ª–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç', '–∫–æ—Ä–∏—Ü–∞', '–∏–º–±–∏—Ä—å', '–≤–∞–Ω–∏–ª—å', '—Å—Ç—Ä—É–∂–∫–∞ –∫–æ–∫–æ—Å–æ–≤–∞—è', '–æ—Ä–µ—Ö –º—É—Å–∫–∞—Ç–Ω—ã–π', '—Ç–º–∏–Ω', '–±–∞–∑–∏–ª–∏–∫', '–ø–∞–ø—Ä–∏–∫–∞', '—Å–ø–µ—Ü–∏–∏', '–∫—É—Ä–∫—É–º–∞', '–∫–æ—Ä–∏–∞–Ω–¥—Ä', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–∫—É–º–∏–Ω', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '–ø–∏—â–µ–≤–æ–π –∫—Ä–∞—Å–∏—Ç–µ–ª—å', '–∞–≥–∞—Ä-–∞–≥–∞—Ä', '–≥–≤–æ–∑–¥–∏–∫–∞', '—Ö–º–µ–ª–∏-—Å—É–Ω–µ–ª–∏']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['grocery'])
def grocery(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–º–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ', '–º—É–∫–∞', '—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å', '–¥—Ä–æ–∂–∂–∏', '—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å', '—Å–∞—Ö–∞—Ä', '–∫—Ä–∞—Ö–º–∞–ª', '—Å–æ–µ–≤—ã–π —Å–æ—É—Å', '–º–∞—Å–ª–æ –∫–æ–∫–æ—Å–æ–≤–æ–µ', '–º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ', '–º–∞—Å–ª–æ –∫—É–Ω–∂—É—Ç–Ω–æ–µ', '–º–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ', '—Å–æ–¥–∞', '—Å–æ–ª—å', '–Ω—É—Ç', '—É–∫—Å—É—Å']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['birds'])
def birds(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–∫—É—Ä–∏—Ü–∞', '–º—è—Å–æ –∏–Ω–¥–µ–π–∫–∏', '–∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ', '—É—Ç–∫–∞', '—Ñ–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏', '–∫—É—Ä–∏–Ω—ã–µ –≥—Ä—É–¥–∫–∏']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['dfruits'])
def dfruits(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–∏–∑—é–º', '–∫—É—Ä–∞–≥–∞', '—á–µ—Ä–Ω–æ—Å–ª–∏–≤', '—Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['berry'])
def berry(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '–∫–ª—é–∫–≤–∞', '–∞—Ä–±—É–∑', '—Å–º–æ—Ä–æ–¥–∏–Ω–∞']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['candy'])
def candy(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—à–æ–∫–æ–ª–∞–¥', '–º–µ–¥', '–∫–∞–∫–∞–æ', '–∫–æ–Ω—Ñ–µ—Ç—ã']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['green'])
def green(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—É–∫—Ä–æ–ø', '–ø–µ—Ç—Ä—É—à–∫–∞', '–ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–Ω—ã–µ', '–±–∞–∑–∏–ª–∏–∫', '–∑–µ–ª–µ–Ω—å', '–∫–∏–Ω–∑–∞']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['pasta'])
def pasta(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–º–∞–∫–∞—Ä–æ–Ω—ã', '–≤–µ—Ä–º–∏—à–µ–ª—å', '–ª–∞–ø—à–∞', '—Å–ø–∞–≥–µ—Ç—Ç–∏', '–∫–∞–Ω–µ–ª–æ–Ω–Ω–∏']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['nuts'])
def nuts(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '–æ—Ä–µ—Ö –º–∏–Ω–¥–∞–ª—å', '–æ—Ä–µ—Ö –º—É—Å–∫–∞—Ç–Ω—ã–π', '–æ—Ä–µ—Ö –∫–µ–¥—Ä–æ–≤—ã–π']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['bread'])
def bread(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—Ö–ª–µ–±', '–ª–∞–≤–∞—à', '–≥—Ä–µ–Ω–∫–∏', '—Å—É—Ö–∞—Ä–∏']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['eggs'])
def eggs(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['—è–π—Ü–æ', '—è–∏—á–Ω—ã–π –±–µ–ª–æ–∫', '—è–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(commands=['lsd'])
def lsd(message):
    tg_analytic.statistics(message.chat.id, message.text)
    list_of_vegs = ['–≥—Ä–∏–±—ã', '–≥—Ä–∏–±—ã —à–∞–º–ø–∏–Ω—å–æ–Ω—ã']
    button_list = []
    for each in list_of_vegs:
        button_list.append(types.InlineKeyboardButton(each, callback_data = each))
    markup = InlineKeyboardMarkup(row_width=3)
    for i in button_list:
        markup.add(i)
    markup.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='search'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∏:', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def send_echo(message):
    tg_analytic.statistics(message.chat.id, message.text)
    if message.chat.type == 'private':
        user_text = message.text
        if user_text == '–ê –∞–≤—Ç–æ—Ä –∫—Ç–æ?':
            bot.send_message(message.chat.id, "–í–æ–≤–∫–∞ –î–æ—Ä–æ–Ω–∏–Ω https://github.com/DoroninDobro")
        elif message.text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == 'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            st = message.text.split(' ')
            if 'txt' in st or '—Ç—Ö—Ç' in st:
                tg_analytic.analysis(st,message.chat.id)
                with open('%s.txt' %message.chat.id ,'r',encoding='UTF-8') as file:
                    bot.send_document(message.chat.id,file)
                tg_analytic.remove(message.chat.id)
            else:
                messages = tg_analytic.analysis(st,message.chat.id)
                bot.send_message(message.chat.id, messages)
        else:
            welcome(message)

# function proccesing answer
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global ingredients_user
    if call.message:
        if call.data == 'search':
            search(call.message)
        elif call.data == 'cereals':
            cereals(call.message)
        elif call.data == 'vegs':
            vegs(call.message)
        elif call.data == 'fruits':
            fruits(call.message)
        elif call.data == 'fish':
            fish(call.message)
        elif call.data == 'meat':
            meat(call.message)
        elif call.data == 'milks':
            milks(call.message)
        elif call.data == 'spice':
            spice(call.message)
        elif call.data == 'grocery':
            grocery(call.message)
        elif call.data == 'birds':
            birds(call.message)
        elif call.data == 'dfruits':
            dfruits(call.message)
        elif call.data == 'berry':
            berry(call.message)
        elif call.data == 'candy':
            candy(call.message)
        elif call.data == 'green':
            green(call.message)
        elif call.data == 'pasta':
            pasta(call.message)
        elif call.data == 'nuts':
            nuts(call.message)
        elif call.data == 'bread':
            bread(call.message)
        elif call.data == 'eggs':
            eggs(call.message)
        elif call.data == 'lsd':
            lsd(call.message)
        elif call.data == 'give_recipes1':
            give_recipes1(call.message)
        else:
            ingredients_user += call.data
            ingredients_user += ' + '
            done_add(call.message, call.data)

#bot.polling()
bot.polling(none_stop=True) #, timeout = 120)  # bot work non-stop
